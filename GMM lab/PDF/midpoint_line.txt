#include <GL/glut.h>
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <math.h>
#define endl '\n'
using namespace std;
void display();
float xmin = 20;
float ymin = -100;
float xmax = 90;
float ymax = -30;
float pts[10][2];
int N = 150;
void init(void)
{
    glClearColor(0.0, 0, 0, 0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-400, 400, -400, 400);
}
// region ko define kar raha
int code(float x, float y)
{
    int c = 0;
    if (y > ymax)
        c = 8;
    if (y < ymin)
        c = 4;
    if (x > xmax)
        c = c | 2;
    if (x < xmin)
        c = c | 1;
    return c;
}
void draw_string(int x, int y, int xoffset, int yoffset, char str[])
{
    int w = glutBitmapLength(GLUT_BITMAP_HELVETICA_12, (unsigned char *)str);
    glRasterPos2f(x + xoffset, y + yoffset);
    int len = strlen(str);
    int i;
    for (i = 0; i < len; i++)
    {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, str[i]);
    }
    glFlush();
}
void mid_point(float x1, float y1, float x2, float y2)
{
    int c1 = code(x1, y1);
    int c2 = code(x2, y2);
    // cout<<c1<<" "<<c2<<" "<<x1<<" "<<y1<<" "<<x2<<" "<<y2<<endl;
    if ((c1 & c2) > 0)
    {
        // cout << "Completely outisde\n";
        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_LINE_LOOP);
        glVertex2i(x1, y1);
        glVertex2i(x2, y2);
        glEnd();
        glFlush();
        return;
    }
    if (c1 == 0 && c2 == 0)
    {
        // cout << "Completely Inside\n";
        glColor3f(0.0, 1.0, 0.0);
        glBegin(GL_LINE_LOOP);
        glVertex2i(x1, y1);
        glVertex2i(x2, y2);
        glEnd();
        glFlush();
        return;
    }
    else
    {
        float mx = (x1 + x2) / 2, my = (y1 + y2) / 2;
        if (mx == xmin || mx == xmax || my == ymin || my == ymax)
        {
            int x1code = code(x1, y1);
            int x2code = code(x2, y2);
            if (x1code == 0)
                mid_point(x1, y1, mx, my);
            else if (x2code == 0)
                mid_point(x2, y2, mx, my);
            else
            {
                mid_point(x1, y1, mx, my);
                mid_point(x2, y2, mx, my);
            }
            return;
        }
        mid_point(x1, y1, mx, my);
        mid_point(x2, y2, mx, my);
    }
    return;
}
// void draw_line(float xi, float yi, float xf, float yf)
void draw_line(int i, int j)
{
    int xi = pts[i][0], yi = pts[i][1], xf = pts[j][0], yf = pts[j][1];
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_LINE_LOOP);
    glVertex2i(xi, yi);
    glVertex2i(xf, yf);
    glEnd();
    glFlush();
    mid_point(xi, yi, xf, yf);
}
void draw_Window()
{
    glColor3f(0, 1, 1);
    glBegin(GL_LINE_LOOP);
    glVertex2i(xmin, ymin);
    glVertex2i(xmin, ymax);
    glVertex2i(xmax, ymax);
    glVertex2i(xmax, ymin);
    glEnd();
    glFlush();
}
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    draw_Window();
    glBegin(GL_LINES);
    glVertex2f(xmin, -300.0f);
    glVertex2f(xmin, 300.0f);
    glEnd();
    glBegin(GL_LINES);
    glVertex2f(xmax, -300.0f);
    glVertex2f(xmax, 300.0f);
    glEnd();
    glBegin(GL_LINES);
    glVertex2f(-300.0f, ymin);
    glVertex2f(300.0f, ymin);
    glEnd();
    glBegin(GL_LINES);
    glVertex2f(-300.0f, ymax);
    glVertex2f(300.0f, ymax);
    glEnd();
    glColor3f(0, 0.5, 1);
    draw_string(xmin - 50, (ymax + ymin) / 2, 0, 0, "0001");
    draw_string(xmin - 50, ymax + 20, 0, 0, "1001");
    draw_string((xmin + xmax) / 2, (ymax + 20), 0, 0, "1000");
    draw_string(xmax + 50, (ymax + 20), 0, 0, "1010");
    draw_string(xmax + 50, (ymax + ymin) / 2, 0, 0, "0010");
    draw_string(xmax + 50, ymin - 20, 0, 0, "0110");
    draw_string((xmin + xmax) / 2, ymin - 20, 0, 0, "0100");
    draw_string(xmin - 50, ymin - 20, 0, 0, "0101");
    draw_string((xmin + xmax) / 2, (ymax + ymin) / 2, 0, 0, "0000");
    draw_line(0, 1);
    draw_line(2, 3);
    draw_line(4, 5);
    draw_line(6, 7);
    draw_line(8, 9);
    draw_string(20, -60, 0, 0, (char *)"A(20,-60) ");
    draw_string(90, -20, 0, 0, (char *)"B(90,-20)");
    draw_string(0, 0, 0, 0, (char *)"C(0,0) ");
    draw_string(30, -20, 0, 0, (char *)"D(30,-20)");
    draw_string(50, 0, 0, 0, (char *)"E(50,0) ");
    draw_string(50, -200, 0, 0, (char *)"F(50,-200)");
    draw_string(40, 20, 0, 0, (char *)"G(40,20) ");
    draw_string(140, -160, 0, 0, (char *)"H(140,-160)");
    draw_string(-200, 10, 0, 0, (char *)"I(-200,10) ");
    draw_string(100, -90, 0, 0, (char *)"J(100,-90)");
    glFlush();
}
int main(int argc, char **argv)
{
    cout << "Line (20, -60), (90, -20) : Clipping Case Line (0, 0), (30, -20) : Fully Outside Line(50, -200), (50, 0) : Clipping Case Line (40, 20), (140, -160) : Clipping Case (-200, 10), (100,-90) : Clipping Case";
    pts[0][0] = 20, pts[0][1] = -60;
    pts[1][0] = 90, pts[1][1] = -20;
    pts[2][0] = 0, pts[2][1] = 0;
    pts[3][0] = 30, pts[3][1] = -20;
    pts[4][0] = 50, pts[4][1] = 0;
    pts[5][0] = 50, pts[5][1] = -200;
    pts[6][0] = 40, pts[6][1] = 20;
    pts[7][0] = 140, pts[7][1] = -160;
    pts[8][0] = -200, pts[8][1] = 10;
    pts[9][0] = 100, pts[9][1] = -90;
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(1080, 1080);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Clipping");
    glutDisplayFunc(display);
    init();
    glutMainLoop();
    return 0;
}